{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Example CodeBuild on ARM lambda + ECR + ECS + Fargate + ALB stack",
  "Resources": {
    "EcrRepositoryApi": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": "aws-fargate-deployment-api",
        "EmptyOnDelete": true,
        "ImageTagMutability": "MUTABLE",
        "RepositoryPolicyText": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowPublicPull",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "ecr:BatchGetImage",
                "ecr:DescribeImages",
                "ecr:GetDownloadUrlForLayer",
                "ecr:ListImages"
              ]
            }
          ]
        }
      }
    },
    "BuildApiS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "example-awsfargatedeployment-api-src",
        "AccessControl": "Private",
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "BuildApiCodeBuildServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "BuildApiCodeBuildServiceRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codebuild.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CodeBuildServiceRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:GetObjectVersion"
                  ],
                  "Resource": [
                    "arn:aws:s3:::example-awsfargatedeployment-api-src/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    "arn:aws:s3:::example-awsfargatedeployment-api-src"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListAllMyBuckets"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codebuild:CreateReportGroup",
                    "codebuild:CreateReport",
                    "codebuild:UpdateReport",
                    "codebuild:BatchPutTestCases"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:GetAuthorizationToken"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:CompleteLayerUpload",
                    "ecr:GetAuthorizationToken",
                    "ecr:InitiateLayerUpload",
                    "ecr:PutImage",
                    "ecr:UploadLayerPart"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "EcrRepositoryApi",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "BuildApiCodeBuildProject": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Name": "BuildApiCodeBuildProject",
        "Source": {
          "Type": "S3",
          "Location": "example-awsfargatedeployment-api-src/src.zip"
        },
        "Environment": {
          "Type": "ARM_CONTAINER",
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/amazonlinux2-aarch64-standard:2.0",
          "PrivilegedMode": true,
          "EnvironmentVariables": [
            {
              "Type": "PLAINTEXT",
              "Name": "REPOSITORY_URI",
              "Value": {
                "Fn::GetAtt": [
                  "EcrRepositoryApi",
                  "RepositoryUri"
                ]
              }
            }
          ]
        },
        "ConcurrentBuildLimit": 1,
        "Artifacts": {
          "Type": "NO_ARTIFACTS"
        },
        "ServiceRole": {
          "Ref": "BuildApiCodeBuildServiceRole"
        }
      }
    },
    "EcsCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "example-aws-fargate-deployment"
      }
    },
    "IamRoleApiExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs-tasks.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        ],
        "Policies": [
          {
            "PolicyName": "EcsTaskExecutionPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:GetAuthorizationToken"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "EcrRepositoryApi",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "EcsTaskLogGroupApi",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "EcsTaskLogGroupApi": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "example-aws-fargate-deployment-api",
        "RetentionInDays": 1
      }
    },
    "EcsTaskApi": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ExecutionRoleArn": {
          "Ref": "IamRoleApiExecution"
        },
        "Cpu": "256",
        "Memory": "512",
        "EphemeralStorage": {
          "SizeInGiB": 21
        },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "RuntimePlatform": {
          "CpuArchitecture": "ARM64",
          "OperatingSystemFamily": "LINUX"
        },
        "ContainerDefinitions": [
          {
            "Name": "api",
            "Image": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Fn::GetAtt": [
                      "EcrRepositoryApi",
                      "RepositoryUri"
                    ]
                  },
                  "latest"
                ]
              ]
            },
            "PortMappings": [
              {
                "ContainerPort": 80,
                "HostPort": 80
              }
            ],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": "example-aws-fargate-deployment-api",
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": "ecs-api"
              }
            }
          }
        ]
      }
    },
    "EcsServiceApi": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "TaskDefinition": {
          "Ref": "EcsTaskApi"
        },
        "DesiredCount": 1,
        "LaunchType": "FARGATE",
        "DeploymentConfiguration": {
          "MaximumPercent": 100,
          "MinimumHealthyPercent": 0
        },
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "Subnets": [
              "subnet-ec6a41a6",
              "subnet-de19d1b7",
              "subnet-13896268"
            ],
            "SecurityGroups": [
              {
                "Ref": "SecurityGroupApi"
              }
            ]
          }
        }
      }
    },
    "SecurityGroupApi": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow all outbound traffic",
        "VpcId": "vpc-b477b0dd",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 0,
            "ToPort": 65535,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    }
  }
}
